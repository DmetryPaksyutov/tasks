/*Ординальные числа — расширение множества целых неотрицательных чисел. Каждому целому
неотрицательному числу x поставим в соответствие ординальное число — множество f(x). Первые
несколько ординальных чисел можно определить так:
• Нулю сопоставим пустое множество:
f(0) = {}.
• Единице сопоставим множество, содержащее множество f(0) как элемент:
f(1) = {f(0)} = {{}}.
• Двойке сопоставим множество, содержащее f(0) и f(1) как элементы:
f(2) = {f(0), f(1)} = {{},{{}}}.
• И так далее: каждому положительному целому числу k сопоставим множество, состоящее из
всех предыдущих ординальных чисел как элементов. Формула:
f(k) = {f(0), f(1), . . . , f(k − 1)}.
Далее можно аналогично определить ординальные числа, не соответствующие целым. Увы, в
нашей задаче это не понадобится.
Дана запись ординального числа, соответствующего какому-то целому неотрицательному числу n. Найдите n.
Формат входных данных
В первой строке записано ординальное число, соответствующее целому неотрицательному числу
n (0 ⩽ n ⩽ 15). Строка состоит из символов «{», «,» и «}».
В каждом множестве, встречающемся в записи, все элементы перечислены ровно по одному разу.
Однако, поскольку множество не меняется от перестановки элементов в нём, порядок перечисления
может быть произвольным.
Формат выходных данных
Выведите целое число n, соответствующее заданному ординальному числу*/

using namespace std;
#include <iostream>
#include <string>
#include <stack>

string s;
int n = 0;
stack<char> st;

int main()
{
    ios_base::sync_with_stdio(0);

    getline(cin, s);

    if (s == "{}") {
        cout << 0;
        return 0;
    }
    for (char c : s) {
        if (c == ',' && st.size() == 1) n++;
        else if (c == '{') st.push('{');
        else if (c == '}') st.pop();
    }
    cout << (n + 1);
}


